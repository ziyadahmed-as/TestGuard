# Generated by Django 5.2.5 on 2025-08-31 18:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicDepartment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique department code within the institution', max_length=20, validators=[django.core.validators.RegexValidator(regex='^[A-Z0-9_-]+$')])),
                ('name', models.CharField(help_text='Official name of the academic department', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the department is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Academic Department',
                'verbose_name_plural': 'Academic Departments',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='ActiveExamSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_token', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for this exam session', unique=True)),
                ('started_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the exam session commenced')),
                ('last_activity', models.DateTimeField(auto_now=True, help_text='Timestamp of the most recent activity during this session')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this exam session is currently active')),
            ],
            options={
                'verbose_name': 'Active Exam Session',
                'verbose_name_plural': 'Active Exam Sessions',
            },
        ),
        migrations.CreateModel(
            name='BulkUserImport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('import_file', models.FileField(help_text='Excel spreadsheet containing user data for import', upload_to='user_imports/%Y/%m/%d/')),
                ('status', models.CharField(choices=[('PENDING', 'Pending Processing'), ('PROCESSING', 'Processing in Progress'), ('COMPLETED', 'Successfully Completed'), ('FAILED', 'Processing Failed'), ('PARTIAL', 'Partial Success with Errors')], default='PENDING', help_text='Current processing status of the import operation', max_length=12)),
                ('total_records', models.PositiveIntegerField(default=0, help_text='Total number of records identified in the import file')),
                ('successful_imports', models.PositiveIntegerField(default=0, help_text='Number of user records successfully created')),
                ('failed_imports', models.PositiveIntegerField(default=0, help_text='Number of user records that failed to import')),
                ('error_log', models.TextField(blank=True, help_text='Detailed error messages for failed import operations')),
                ('started_at', models.DateTimeField(blank=True, help_text='Timestamp when processing commenced', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='Timestamp when processing completed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Bulk User Import',
                'verbose_name_plural': 'Bulk User Imports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique course code within the department', max_length=20, validators=[django.core.validators.RegexValidator(regex='^[A-Z0-9_-]+$')])),
                ('name', models.CharField(help_text='Official name of the course', max_length=200)),
                ('credits', models.PositiveIntegerField(help_text='Number of academic credits awarded for completing the course')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the course is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_on', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the enrollment was created')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this enrollment is currently active')),
            ],
            options={
                'verbose_name': 'Enrollment',
                'verbose_name_plural': 'Enrollments',
                'ordering': ['-enrolled_on'],
            },
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Official name of the educational institution', max_length=255, unique=True)),
                ('domain', models.CharField(help_text='Primary email domain for institutional authentication', max_length=255, unique=True, validators=[django.core.validators.RegexValidator(regex='^[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$')])),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the institution is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Institution',
                'verbose_name_plural': 'Institutions',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_code', models.CharField(help_text='Unique identifier for this specific section', max_length=10)),
                ('term', models.CharField(help_text='Academic term when this section is offered', max_length=20)),
                ('year', models.PositiveIntegerField(help_text='Academic year when this section is offered')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this section is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Course Section',
                'verbose_name_plural': 'Course Sections',
                'ordering': ['-year', 'term', 'section_code'],
            },
        ),
        migrations.CreateModel(
            name='UserDeviceSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_hash', models.CharField(help_text='Cryptographic hash of device fingerprint for anonymous identification', max_length=255)),
                ('browser_name', models.CharField(blank=True, help_text='Name of the web browser used', max_length=100)),
                ('browser_version', models.CharField(blank=True, help_text='Version of the web browser', max_length=50)),
                ('os_name', models.CharField(blank=True, help_text='Operating system name', max_length=100)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address from which the session was initiated', null=True)),
                ('first_seen', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the device was first recognized')),
                ('last_activity', models.DateTimeField(auto_now=True, help_text='Timestamp of the most recent activity from this device')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this device session is currently active')),
                ('user_agent', models.TextField(blank=True, help_text='Raw HTTP user agent string')),
            ],
            options={
                'verbose_name': 'User Device Session',
                'verbose_name_plural': 'User Device Sessions',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('ADMIN', 'System Administrator'), ('INSTR', 'Instructor'), ('STUD', 'Student')], help_text="User's role within the educational platform", max_length=5)),
                ('title', models.CharField(blank=True, help_text='Professional or academic title', max_length=100)),
                ('department', models.CharField(blank=True, help_text='Academic or organizational department', max_length=100)),
                ('email_verified', models.BooleanField(default=False, help_text="Designates whether the user's email has been verified")),
                ('mfa_enabled', models.BooleanField(default=False, help_text='Designates whether multi-factor authentication is enabled')),
                ('last_activity', models.DateTimeField(auto_now=True, help_text="Timestamp of the user's last platform activity")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='core_user_groups', related_query_name='core_user_group', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='core_user_permissions', related_query_name='core_user_permission', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['last_name', 'first_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
