# Generated by Django 5.2.5 on 2025-09-09 19:54

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicDepartment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique department code within the institution', max_length=20, validators=[django.core.validators.RegexValidator(regex='^[A-Z0-9_-]+$')])),
                ('name', models.CharField(help_text='Official name of the academic department', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the department is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Academic Department',
                'verbose_name_plural': 'Academic Departments',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('SUPERADMIN', 'Super Admin'), ('ADMIN', 'System Administrator'), ('INSTR', 'Instructor'), ('STUD', 'Student')], default='STUD', help_text="User's role within the platform.", max_length=20)),
                ('title', models.CharField(blank=True, help_text='Professional or academic title.', max_length=100)),
                ('department', models.CharField(blank=True, help_text='Department or faculty name.', max_length=100)),
                ('email_verified', models.BooleanField(default=False, help_text='Has the user verified their email?')),
                ('mfa_enabled', models.BooleanField(default=False, help_text='Is multi-factor authentication enabled?')),
                ('last_activity', models.DateTimeField(auto_now=True, help_text='Last activity timestamp.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='Admin who created this account.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='core_user_groups', related_query_name='core_user_group', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='core_user_permissions', related_query_name='core_user_permission', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['last_name', 'first_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique course code within the department', max_length=20, validators=[django.core.validators.RegexValidator(regex='^[A-Z0-9_-]+$')])),
                ('name', models.CharField(help_text='Official name of the course', max_length=200)),
                ('credits', models.PositiveIntegerField(help_text='Number of academic credits awarded for completing the course')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the course is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('department', models.ForeignKey(help_text='Academic department offering this course', on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='core.academicdepartment')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Official name of the educational institution', max_length=255, unique=True)),
                ('domain', models.CharField(help_text='Primary email domain for institutional authentication', max_length=255, unique=True, validators=[django.core.validators.RegexValidator(regex='^[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$')])),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the institution is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Institution',
                'verbose_name_plural': 'Institutions',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['domain', 'is_active'], name='core_instit_domain_04ded5_idx'), models.Index(fields=['created_at'], name='core_instit_created_1b95f1_idx')],
            },
        ),
        migrations.CreateModel(
            name='AdminUserCreationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_method', models.CharField(choices=[('MANUAL', 'Manual Creation'), ('CSV_IMPORT', 'CSV Import'), ('API', 'API Integration'), ('SYSTEM', 'System Generated')], default='MANUAL', help_text='Method used for user creation', max_length=20)),
                ('users_created', models.PositiveIntegerField(default=0, help_text='Number of users successfully created')),
                ('users_failed', models.PositiveIntegerField(default=0, help_text='Number of users that failed to create')),
                ('details', models.JSONField(default=dict, help_text='Detailed information about the creation operation')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(help_text='Administrator who performed the user creation', limit_choices_to={'role': 'ADMIN'}, on_delete=django.db.models.deletion.CASCADE, related_name='user_creation_logs', to=settings.AUTH_USER_MODEL)),
                ('institution', models.ForeignKey(help_text='Institution where users were created', on_delete=django.db.models.deletion.CASCADE, related_name='creation_logs', to='core.institution')),
            ],
            options={
                'verbose_name': 'User Creation Log',
                'verbose_name_plural': 'User Creation Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='academicdepartment',
            name='institution',
            field=models.ForeignKey(help_text='Institution that contains this academic department', on_delete=django.db.models.deletion.CASCADE, related_name='departments', to='core.institution'),
        ),
        migrations.AddField(
            model_name='user',
            name='institution',
            field=models.ForeignKey(blank=True, help_text='Institution this user belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='core.institution'),
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_code', models.CharField(help_text='Unique identifier for this specific section', max_length=10)),
                ('term', models.CharField(help_text='Academic term when this section is offered', max_length=20)),
                ('year', models.PositiveIntegerField(help_text='Academic year when this section is offered')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this section is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(help_text='Course that this section belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='core.course')),
                ('instructor', models.ForeignKey(help_text='Instructor responsible for teaching this section', limit_choices_to={'role': 'INSTR'}, on_delete=django.db.models.deletion.CASCADE, related_name='teaching_sections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Course Section',
                'verbose_name_plural': 'Course Sections',
                'ordering': ['-year', 'term', 'section_code'],
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_on', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the enrollment was created')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this enrollment is currently active')),
                ('student', models.ForeignKey(help_text='Student enrolled in the course section', limit_choices_to={'role': 'STUD'}, on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to=settings.AUTH_USER_MODEL)),
                ('section', models.ForeignKey(help_text='Course section the student is enrolled in', on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='core.section')),
            ],
            options={
                'verbose_name': 'Enrollment',
                'verbose_name_plural': 'Enrollments',
                'ordering': ['-enrolled_on'],
            },
        ),
        migrations.CreateModel(
            name='UserDeviceSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_hash', models.CharField(help_text='Cryptographic hash of device fingerprint for anonymous identification', max_length=255)),
                ('browser_name', models.CharField(blank=True, help_text='Name of the web browser used', max_length=100)),
                ('browser_version', models.CharField(blank=True, help_text='Version of the web browser', max_length=50)),
                ('os_name', models.CharField(blank=True, help_text='Operating system name', max_length=100)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address from which the session was initiated', null=True)),
                ('first_seen', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the device was first recognized')),
                ('last_activity', models.DateTimeField(auto_now=True, help_text='Timestamp of the most recent activity from this device')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this device session is currently active')),
                ('user_agent', models.TextField(blank=True, help_text='Raw HTTP user agent string')),
                ('user', models.ForeignKey(help_text='User associated with this device session', on_delete=django.db.models.deletion.CASCADE, related_name='device_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Device Session',
                'verbose_name_plural': 'User Device Sessions',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='UserImportTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the import template', max_length=100)),
                ('description', models.TextField(help_text='Description and usage guidelines')),
                ('template_file', models.FileField(help_text='Template file for user data import', upload_to='user_templates/')),
                ('required_fields', models.JSONField(default=list, help_text='List of required field names')),
                ('optional_fields', models.JSONField(default=list, help_text='List of optional field names')),
                ('field_descriptions', models.JSONField(default=dict, help_text='Descriptions for each field')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this template is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(help_text='Admin who created this template', limit_choices_to={'role': 'ADMIN'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Import Template',
                'verbose_name_plural': 'User Import Templates',
                'ordering': ['name'],
            },
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['department', 'is_active'], name='core_course_departm_61599a_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['code'], name='core_course_code_833bcc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='course',
            unique_together={('department', 'code')},
        ),
        migrations.AddIndex(
            model_name='adminusercreationlog',
            index=models.Index(fields=['created_by', 'created_at'], name='core_adminu_created_b53b8b_idx'),
        ),
        migrations.AddIndex(
            model_name='adminusercreationlog',
            index=models.Index(fields=['institution', 'created_at'], name='core_adminu_institu_f4615f_idx'),
        ),
        migrations.AddIndex(
            model_name='adminusercreationlog',
            index=models.Index(fields=['creation_method'], name='core_adminu_creatio_c55d17_idx'),
        ),
        migrations.AddIndex(
            model_name='academicdepartment',
            index=models.Index(fields=['institution', 'is_active'], name='core_academ_institu_2dfa06_idx'),
        ),
        migrations.AddIndex(
            model_name='academicdepartment',
            index=models.Index(fields=['code'], name='core_academ_code_cd782c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='academicdepartment',
            unique_together={('institution', 'code')},
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['institution', 'role', 'is_active'], name='core_user_institu_c1e388_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='core_user_email_38052c_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['last_activity'], name='core_user_last_ac_3b828a_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='core_user_created_bd650f_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_by'], name='core_user_created_3bcf81_idx'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(condition=models.Q(('institution__isnull', False)), fields=('institution', 'email'), name='unique_institution_email'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(condition=models.Q(('institution__isnull', True)), fields=('email',), name='unique_superadmin_email'),
        ),
        migrations.AddIndex(
            model_name='section',
            index=models.Index(fields=['course', 'is_active'], name='core_sectio_course__a9ab1a_idx'),
        ),
        migrations.AddIndex(
            model_name='section',
            index=models.Index(fields=['instructor', 'is_active'], name='core_sectio_instruc_d21ceb_idx'),
        ),
        migrations.AddIndex(
            model_name='section',
            index=models.Index(fields=['term', 'year'], name='core_sectio_term_a12be0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='section',
            unique_together={('course', 'section_code', 'term', 'year')},
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['student', 'is_active'], name='core_enroll_student_7edad6_idx'),
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['section', 'is_active'], name='core_enroll_section_e5c4bd_idx'),
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['enrolled_on'], name='core_enroll_enrolle_8690ba_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='enrollment',
            unique_together={('student', 'section')},
        ),
        migrations.AddIndex(
            model_name='userdevicesession',
            index=models.Index(fields=['user', 'is_active'], name='core_userde_user_id_fa17d7_idx'),
        ),
        migrations.AddIndex(
            model_name='userdevicesession',
            index=models.Index(fields=['last_activity'], name='core_userde_last_ac_63a50a_idx'),
        ),
        migrations.AddIndex(
            model_name='userdevicesession',
            index=models.Index(fields=['device_hash'], name='core_userde_device__7e678d_idx'),
        ),
        migrations.AddIndex(
            model_name='userdevicesession',
            index=models.Index(fields=['first_seen'], name='core_userde_first_s_48e86d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userdevicesession',
            unique_together={('user', 'device_hash')},
        ),
        migrations.AddIndex(
            model_name='userimporttemplate',
            index=models.Index(fields=['is_active'], name='core_userim_is_acti_6ac186_idx'),
        ),
        migrations.AddIndex(
            model_name='userimporttemplate',
            index=models.Index(fields=['created_by'], name='core_userim_created_50d125_idx'),
        ),
    ]
