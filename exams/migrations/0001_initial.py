# Generated by Django 5.2.5 on 2025-09-07 11:43

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Descriptive title of the exam', max_length=255)),
                ('description', models.TextField(blank=True, help_text="Detailed description of the exam's purpose and content")),
                ('instructions', models.TextField(help_text='Complete instructions for exam takers')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SCHEDULED', 'Scheduled'), ('LIVE', 'Live'), ('COMPLETED', 'Completed'), ('ARCHIVED', 'Archived')], default='DRAFT', help_text='Current lifecycle status of the exam', max_length=10)),
                ('duration', models.PositiveIntegerField(help_text='Total allowed time for exam completion in minutes', validators=[django.core.validators.MinValueValidator(1)])),
                ('max_attempts', models.PositiveIntegerField(default=1, help_text='Maximum number of attempts allowed per student', validators=[django.core.validators.MinValueValidator(1)])),
                ('pass_percentage', models.DecimalField(decimal_places=2, default=35.0, help_text='Minimum score percentage required to pass the exam', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('exam_password', models.CharField(blank=True, help_text='Optional password required for exam access', max_length=100)),
                ('start_date', models.DateTimeField(help_text='Date and time when the exam becomes available')),
                ('end_date', models.DateTimeField(help_text='Date and time when the exam becomes unavailable')),
                ('time_zone', models.CharField(default='UTC', help_text='Time zone for exam scheduling', max_length=50)),
                ('shuffle_questions', models.BooleanField(default=False, help_text='Randomize question order for each attempt')),
                ('shuffle_answers', models.BooleanField(default=False, help_text='Randomize answer choices for multiple choice questions')),
                ('disable_copy_paste', models.BooleanField(default=True, help_text='Prevent copy-paste operations during exam')),
                ('full_screen_required', models.BooleanField(default=False, help_text='Require full-screen mode for exam duration')),
                ('require_webcam', models.BooleanField(default=False, help_text='Require webcam access for proctoring')),
                ('allow_backtracking', models.BooleanField(default=True, help_text='Allow returning to previous questions')),
                ('enable_auto_save', models.BooleanField(default=True, help_text='Automatically save progress during exam')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='Instructor who created this exam', limit_choices_to={'role': 'INSTR'}, on_delete=django.db.models.deletion.CASCADE, related_name='created_exams', to=settings.AUTH_USER_MODEL)),
                ('sections', models.ManyToManyField(help_text='Course sections with access to this exam', related_name='exams', to='core.section')),
            ],
            options={
                'verbose_name': 'Exam',
                'verbose_name_plural': 'Exams',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExamAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(blank=True, help_text='Timestamp when the attempt commenced', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='Timestamp when the attempt concluded', null=True)),
                ('status', models.CharField(choices=[('NOT_STARTED', 'Not Started'), ('PASSWORD_REQUIRED', 'Password Required'), ('IN_PROGRESS', 'In Progress'), ('SUBMITTED', 'Submitted'), ('AUTO_SUBMITTED', 'Auto-Submitted'), ('TERMINATED', 'Terminated')], default='NOT_STARTED', help_text='Current status of the exam attempt', max_length=20)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address from which the attempt was initiated', null=True)),
                ('technical_notes', models.JSONField(default=dict, help_text='Technical metadata and system notes for the attempt')),
                ('session_token', models.UUIDField(blank=True, help_text='Unique identifier for this attempt session', null=True)),
                ('termination_reason', models.CharField(blank=True, help_text='Reason for attempt termination if applicable', max_length=200)),
                ('last_auto_save', models.DateTimeField(blank=True, help_text='Timestamp of most recent auto-save operation', null=True)),
                ('auto_save_count', models.PositiveIntegerField(default=0, help_text='Total number of auto-save operations performed')),
                ('password_attempts', models.PositiveIntegerField(default=0, help_text='Number of unsuccessful password attempts')),
                ('last_password_attempt', models.DateTimeField(blank=True, help_text='Timestamp of most recent password attempt', null=True)),
                ('device_session', models.ForeignKey(blank=True, help_text='Device session used for this attempt', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='exam_attempts', to='core.userdevicesession')),
                ('exam', models.ForeignKey(help_text='Exam being attempted', on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='exams.exam')),
                ('student', models.ForeignKey(help_text='Student attempting the exam', limit_choices_to={'role': 'STUD'}, on_delete=django.db.models.deletion.CASCADE, related_name='exam_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Exam Attempt',
                'verbose_name_plural': 'Exam Attempts',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='MonitoringEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('TAB_SWITCH', 'Tab Switch Detected'), ('COPY_PASTE', 'Copy/Paste Detected'), ('FULLSCREEN_EXIT', 'Fullscreen Exit'), ('MULTIPLE_FACES', 'Multiple Faces Detected'), ('NO_FACE', 'No Face Detected'), ('VOICE_DETECTED', 'Voice Detected'), ('MANUAL_FLAG', 'Manually Flagged'), ('DEVICE_MISMATCH', 'Device Mismatch'), ('PASSWORD_BRUTE_FORCE', 'Multiple Password Attempts')], help_text='Type of monitoring event detected', max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Exact time when event was detected')),
                ('severity', models.PositiveIntegerField(default=5, help_text='Severity level from 1 (low) to 10 (critical)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('evidence', models.JSONField(default=dict, help_text='Supporting evidence and contextual data for the event')),
                ('description', models.TextField(blank=True, help_text='Detailed description of the event circumstances')),
                ('reviewed_status', models.CharField(choices=[('PENDING', 'Pending Review'), ('REVIEWING', 'Under Review'), ('APPROVED', 'Approved - No Issue'), ('VIOLATION', 'Violation Confirmed'), ('FALSE_ALARM', 'False Alarm')], default='PENDING', help_text='Current review status of the event', max_length=12)),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='Timestamp when event was reviewed', null=True)),
                ('review_notes', models.TextField(blank=True, help_text='Notes and observations from the review process')),
                ('action_taken', models.TextField(blank=True, help_text='Actions taken based on this event assessment')),
                ('attempt', models.ForeignKey(help_text='Exam attempt where event occurred', on_delete=django.db.models.deletion.CASCADE, related_name='monitoring_events', to='exams.examattempt')),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='Staff member who reviewed this event', limit_choices_to={'role__in': ['ADMIN', 'INSTR']}, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Monitoring Event',
                'verbose_name_plural': 'Monitoring Events',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(help_text='Full text of the assessment question')),
                ('type', models.CharField(choices=[('MC', 'Multiple Choice'), ('TF', 'True/False'), ('FB', 'Fill-in-the-Blank'), ('SA', 'Short Answer'), ('ES', 'Essay')], help_text='Type of question determining response format and evaluation method', max_length=4)),
                ('learning_objective', models.CharField(blank=True, help_text='Specific learning objective addressed by this question', max_length=300)),
                ('points', models.DecimalField(decimal_places=2, default=1.0, help_text='Point value awarded for correct response', max_digits=5, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('estimated_time', models.PositiveIntegerField(default=60, help_text='Estimated time in seconds required to complete this question')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this question is available for use in assessments')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='Instructor who created this question', on_delete=django.db.models.deletion.CASCADE, related_name='created_questions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExamQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order within the exam sequence')),
                ('points', models.DecimalField(decimal_places=2, help_text='Point value for this question within the exam (overrides default)', max_digits=5, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('exam', models.ForeignKey(help_text='Exam containing this question', on_delete=django.db.models.deletion.CASCADE, related_name='exam_questions', to='exams.exam')),
                ('question', models.ForeignKey(help_text='Question being included in the exam', on_delete=django.db.models.deletion.CASCADE, related_name='exam_usage', to='exams.question')),
            ],
            options={
                'verbose_name': 'Exam Question',
                'verbose_name_plural': 'Exam Questions',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='QuestionBank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Descriptive name for the question bank', max_length=200)),
                ('description', models.TextField(blank=True, help_text="Detailed description of the question bank's purpose and content")),
                ('is_global', models.BooleanField(default=False, help_text='Designates whether this question bank is available across the entire institution')),
                ('is_public', models.BooleanField(default=False, help_text='Designates whether this question bank is visible to all instructors')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='Instructor who created this question bank', limit_choices_to={'role': 'INSTR'}, on_delete=django.db.models.deletion.CASCADE, related_name='created_banks', to=settings.AUTH_USER_MODEL)),
                ('institution', models.ForeignKey(help_text='Institution that owns this question bank', on_delete=django.db.models.deletion.CASCADE, related_name='question_banks', to='core.institution')),
            ],
            options={
                'verbose_name': 'Question Bank',
                'verbose_name_plural': 'Question Banks',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='question',
            name='bank',
            field=models.ForeignKey(help_text='Question bank containing this question', on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='exams.questionbank'),
        ),
        migrations.CreateModel(
            name='BulkQuestionImport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('import_file', models.FileField(help_text='Excel spreadsheet containing structured question data', upload_to='question_imports/%Y/%m/%d/')),
                ('status', models.CharField(choices=[('PENDING', 'Pending Processing'), ('PROCESSING', 'Processing in Progress'), ('COMPLETED', 'Successfully Completed'), ('FAILED', 'Processing Failed'), ('PARTIAL', 'Partial Success with Errors')], default='PENDING', help_text='Current processing status of the import operation', max_length=12)),
                ('total_records', models.PositiveIntegerField(default=0, help_text='Total number of question records identified in the import file')),
                ('successful_imports', models.PositiveIntegerField(default=0, help_text='Number of questions successfully created')),
                ('failed_imports', models.PositiveIntegerField(default=0, help_text='Number of questions that failed to import')),
                ('error_log', models.TextField(blank=True, help_text='Detailed error messages for failed import operations')),
                ('started_at', models.DateTimeField(blank=True, help_text='Timestamp when processing commenced', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='Timestamp when processing completed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('uploaded_by', models.ForeignKey(help_text='Instructor who initiated the question import operation', limit_choices_to={'role': 'INSTR'}, on_delete=django.db.models.deletion.CASCADE, related_name='question_imports', to=settings.AUTH_USER_MODEL)),
                ('question_bank', models.ForeignKey(help_text='Question bank where questions will be imported', on_delete=django.db.models.deletion.CASCADE, related_name='imports', to='exams.questionbank')),
            ],
            options={
                'verbose_name': 'Bulk Question Import',
                'verbose_name_plural': 'Bulk Question Imports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuestionResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_answer', models.JSONField(blank=True, help_text='Final submitted answer data', null=True)),
                ('draft_answer', models.JSONField(blank=True, help_text='Temporary draft answer storage for auto-save functionality', null=True)),
                ('points_awarded', models.DecimalField(blank=True, decimal_places=2, help_text='Points awarded for this response after evaluation', max_digits=5, null=True)),
                ('auto_save_count', models.PositiveIntegerField(default=0, help_text='Number of auto-save operations performed for this response')),
                ('last_auto_save', models.DateTimeField(blank=True, help_text='Timestamp of most recent auto-save operation', null=True)),
                ('is_submitted', models.BooleanField(default=False, help_text='Designates whether this response has been formally submitted')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attempt', models.ForeignKey(help_text='Exam attempt containing this response', on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='exams.examattempt')),
                ('question', models.ForeignKey(help_text='Question being responded to', on_delete=django.db.models.deletion.CASCADE, to='exams.question')),
            ],
            options={
                'verbose_name': 'Question Response',
                'verbose_name_plural': 'Question Responses',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='exam',
            index=models.Index(fields=['status', 'created_by'], name='exams_exam_status_a20d46_idx'),
        ),
        migrations.AddIndex(
            model_name='exam',
            index=models.Index(fields=['start_date', 'end_date'], name='exams_exam_start_d_3b125a_idx'),
        ),
        migrations.AddIndex(
            model_name='exam',
            index=models.Index(fields=['created_at'], name='exams_exam_created_d6563d_idx'),
        ),
        migrations.AddIndex(
            model_name='examattempt',
            index=models.Index(fields=['exam', 'student', 'status'], name='exams_exama_exam_id_5762a3_idx'),
        ),
        migrations.AddIndex(
            model_name='examattempt',
            index=models.Index(fields=['student', 'status'], name='exams_exama_student_9ce9f2_idx'),
        ),
        migrations.AddIndex(
            model_name='examattempt',
            index=models.Index(fields=['device_session'], name='exams_exama_device__9ec9f0_idx'),
        ),
        migrations.AddIndex(
            model_name='examattempt',
            index=models.Index(fields=['session_token'], name='exams_exama_session_26371c_idx'),
        ),
        migrations.AddIndex(
            model_name='examattempt',
            index=models.Index(fields=['start_time'], name='exams_exama_start_t_67d169_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='examattempt',
            unique_together={('exam', 'student')},
        ),
        migrations.AddIndex(
            model_name='monitoringevent',
            index=models.Index(fields=['attempt', 'event_type', 'reviewed_status'], name='exams_monit_attempt_7fc89c_idx'),
        ),
        migrations.AddIndex(
            model_name='monitoringevent',
            index=models.Index(fields=['timestamp'], name='exams_monit_timesta_25acf8_idx'),
        ),
        migrations.AddIndex(
            model_name='monitoringevent',
            index=models.Index(fields=['reviewed_status'], name='exams_monit_reviewe_a10a8a_idx'),
        ),
        migrations.AddIndex(
            model_name='monitoringevent',
            index=models.Index(fields=['severity'], name='exams_monit_severit_0c5e19_idx'),
        ),
        migrations.AddIndex(
            model_name='examquestion',
            index=models.Index(fields=['exam', 'order'], name='exams_examq_exam_id_b093bd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='examquestion',
            unique_together={('exam', 'question')},
        ),
        migrations.AddIndex(
            model_name='questionbank',
            index=models.Index(fields=['institution', 'is_global'], name='exams_quest_institu_531765_idx'),
        ),
        migrations.AddIndex(
            model_name='questionbank',
            index=models.Index(fields=['created_at'], name='exams_quest_created_1e8812_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='questionbank',
            unique_together={('institution', 'name')},
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['type', 'is_active'], name='exams_quest_type_552fec_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['bank', 'is_active'], name='exams_quest_bank_id_5afd3d_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['created_by', 'is_active'], name='exams_quest_created_26eb62_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['created_at'], name='exams_quest_created_14243e_idx'),
        ),
        migrations.AddIndex(
            model_name='bulkquestionimport',
            index=models.Index(fields=['status', 'uploaded_by'], name='exams_bulkq_status_d74bbc_idx'),
        ),
        migrations.AddIndex(
            model_name='bulkquestionimport',
            index=models.Index(fields=['question_bank'], name='exams_bulkq_questio_e4a31d_idx'),
        ),
        migrations.AddIndex(
            model_name='bulkquestionimport',
            index=models.Index(fields=['created_at'], name='exams_bulkq_created_c7e935_idx'),
        ),
        migrations.AddIndex(
            model_name='questionresponse',
            index=models.Index(fields=['attempt', 'question'], name='exams_quest_attempt_2029e0_idx'),
        ),
        migrations.AddIndex(
            model_name='questionresponse',
            index=models.Index(fields=['last_auto_save'], name='exams_quest_last_au_26396d_idx'),
        ),
        migrations.AddIndex(
            model_name='questionresponse',
            index=models.Index(fields=['created_at'], name='exams_quest_created_3b7f4e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='questionresponse',
            unique_together={('attempt', 'question')},
        ),
    ]
